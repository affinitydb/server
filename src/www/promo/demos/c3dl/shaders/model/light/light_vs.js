
c3dl.light_vs="struct Light"+"{"+" bool isOn;"+" int type;"+" vec3 ambient;"+" vec3 diffuse;"+" vec3 specular;"+" vec4 position;"+" vec3 spotDirection;"+" float spotExponent;"+" float spotCutoff;"+" float attenuation1;"+" float attenuation2;"+" float attenuation3;"+"};"+"uniform vec3 ambientLightColor;"+"uniform bool lightingOn;"+"const int C3DL_MAX_LIGHTS = 7;"+"uniform Light lights[C3DL_MAX_LIGHTS];"+"void c3dl_SpotLight( in Light light, in vec3 normal, in vec3 eye, in vec3 ecPos, "+"      inout vec3 ambient, inout vec3 diffuse, inout vec3 specular, "+"      float shininess)"+"{"+" float nDotVP; "+" float nDotHV; "+" float spotDot; "+" float spotAttenuation;"+" float attenuation;"+" float d;"+" vec3 VP;"+" float pf;"+" vec3 halfVector;"+" VP = vec3(light.position) - ecPos; "+" vec3 ldir = normalize(light.spotDirection);"+" d = length(VP);"+" VP = normalize(VP);"+" attenuation = 1.0 / (light.attenuation1 + (light.attenuation2 * d) + (light.attenuation3 * d * d));"+" spotDot = dot(-VP, ldir);"+" if(spotDot > cos(radians(light.spotCutoff)))"+" {"+"  spotAttenuation = pow(spotDot, light.spotExponent);"+" }"+" else{"+"  spotAttenuation = 0.0;"+" }"+" attenuation *= spotAttenuation;"+" halfVector = normalize(VP + eye);"+" nDotVP = max(0.0, dot(normal, VP));"+" nDotHV = max(0.0, dot(normal, halfVector));"+" if(nDotVP == 0.0){"+"  pf = 0.0;"+" }"+" else{"+"  pf = pow(nDotHV, shininess);"+" }"+" ambient += light.ambient * attenuation;"+" diffuse += light.diffuse * nDotVP * attenuation; "+" specular += light.specular * pf * attenuation;"+"}"+"void c3dl_PointLight( in Light light, in vec3 normal, in vec3 eye, in vec3 ecPos, "+"      inout vec3 ambient, inout vec3 diffuse, inout vec3 specular, "+"      float shininess)"+"{"+" vec3 VP = vec3(light.position) - ecPos;"+" float pf;"+" vec3 halfVector = normalize(VP + eye);"+" float d = length(VP); "+" VP = normalize(VP);"+" float attenuation = 1.0 / (light.attenuation1 + (light.attenuation2 * d) + (light.attenuation3 * d * d));"+" float nDotVP = max(0.0, dot(normal, VP));"+" float nDotHV = max(0.0, dot(normal, halfVector));"+" if(nDotVP == 0.0){"+"  pf = 0.0;"+" }"+" else{"+"  pf = pow(nDotHV, shininess);"+" }"+" ambient += light.ambient * attenuation;"+" diffuse += light.diffuse * nDotVP * attenuation;"+" specular += light.specular * pf * attenuation;"+"}"+"void c3dl_DirectionalLight(in Light light, in vec3 normal, "+"       inout vec3 ambient, inout vec3 diffuse, inout vec3 specular,"+"       float shininess)"+"{"+" vec3 VP = normalize(vec3(-light.position));"+" float powerfactor;"+" float nDotVP = max(0.0, dot(normal, VP));"+" float nDotHV = nDotVP;"+" if(nDotVP == 0.0){"+"  powerfactor = 0.0;"+" }"+" else{"+"  powerfactor = pow(nDotHV, shininess);"+" }"+" ambient += light.ambient;"+" diffuse += light.diffuse * nDotVP;"+" specular += light.specular * powerfactor;"+"} ";