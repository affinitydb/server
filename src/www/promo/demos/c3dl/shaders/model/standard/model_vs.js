
c3dl.model_vs="attribute vec3 Vertex;"+"attribute vec3 Normal;"+"attribute vec3 Texture;"+"varying vec4 frontColor;"+"varying vec4 texCoord;"+"uniform mat4 modelViewMatrix;"+"uniform mat4 modelViewProjMatrix;"+"uniform mat4 normalMatrix;"+"void main(void){"+" mat3 normalMatrix3x3 = mat3(normalMatrix[0][0],normalMatrix[0][1],normalMatrix[0][2],"+"                             normalMatrix[1][0],normalMatrix[1][1],normalMatrix[1][2],"+"                             normalMatrix[2][0],normalMatrix[2][1],normalMatrix[2][2]);"+" vec3 transformNormal = normalize(normalMatrix3x3 * Normal);"+" vec3 ambient  = vec3(0.0, 0.0, 0.0);"+" vec3 diffuse  = vec3(0.0, 0.0, 0.0);"+" vec3 specular = vec3(0.0, 0.0, 0.0);"+" vec4 ecPos4 = modelViewMatrix * vec4(Vertex,1.0);"+" vec3 ecPos = (vec3(ecPos4))/ecPos4.w;"+" vec3 eye = vec3(0.0, 0.0, 1.0);"+" float shine = 1.0;"+" if(usingMaterial)"+" {"+"  shine = material.shininess;"+" }"+" if(lightingOn)"+" {"+"  for(int i = 0; i < C3DL_MAX_LIGHTS; i++)"+"  {"+"   if(lights[i].isOn) "+"   {"+"    if(lights[i].type == 1)"+"    {"+"     c3dl_DirectionalLight(lights[i], transformNormal, ambient, diffuse, specular, shine);"+"    }"+"    else if(lights[i].type == 2) "+"    {"+"     c3dl_PointLight(lights[i], transformNormal, eye, ecPos, ambient, diffuse, specular, shine);"+"    }"+"    else if(lights[i].type == 3)"+"    {"+"     c3dl_SpotLight(lights[i], transformNormal, eye, ecPos, ambient, diffuse, specular, shine);"+"    }"+"   }"+"  }"+" }"+" if( usingMaterial ){"+"  frontColor = vec4( material.emission + "+"                       ambientLightColor + "+"                       ambient * material.ambient + "+"                       diffuse * material.diffuse + "+"                       specular * material.specular,1.0); "+" }"+" else{"+"  frontColor = vec4(ambientLightColor + ambient + diffuse + specular,1.0);"+" }"+" gl_Position =  modelViewProjMatrix * vec4(Vertex, 1.0);"+" texCoord = vec4(Texture,1.0);"+"}";